{"version":3,"sources":["redux/types.js","components/Loader.js","components/Post.js","components/FetchedPosts.js","redux/actions.js","components/PostForm.js","components/Posts.js","App.js","reportWebVitals.js","redux/appReducer.js","redux/postsReducer.js","redux/rootReducer.js","index.js"],"names":["CREATE_POST","FETCH_POSTS","SHOW_LOADER","HIDE_LOADER","Loader","class","role","post","className","title","dispatch","useDispatch","posts","useSelector","state","fetchedPosts","app","loading","length","map","Post","id","onClick","a","type","fetch","response","json","setTimeout","payload","PostForm","props","submitHandler","event","preventDefault","trim","newPost","Date","now","toString","createPost","setState","changeInputHandler","persist","prev","target","name","value","onSubmit","this","htmlFor","onChange","React","Component","mapDispatchToProps","connect","console","log","syncPosts","App","FetchedPosts","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","rootReducer","combineReducers","action","concat","store","createStore","compose","applyMiddleware","thunk","window","__REDUX_DEVTOOLS_EXTENSION__","render","document","getElementById"],"mappings":"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","file":"static/js/main.ad3b9c84.chunk.js","sourcesContent":["export const CREATE_POST = 'POST/CREATE_POST';\nexport const FETCH_POSTS = 'POST/FETCH_POSTS';\nexport const SHOW_LOADER = 'APP/SHOW_LOADER';\nexport const HIDE_LOADER = 'APP/HIDE_LOADER';\n\n","import React from 'react'\n\nexport const Loader = () => (\n    <div class=\"spinner-border text-danger\" role=\"status\">\n        <span class=\"visually-hidden\">Loading...</span>\n    </div>\n)","import React from 'react'\n\nexport default ({post}) => {\n    return (\n        <div className=\"card\">\n            <div className=\"card-body\">\n                <h5 className=\"card-title\">{post.title}</h5>\n            </div>\n        </div>\n    )\n}","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { fetchedPosts } from '../redux/actions'\nimport { Loader } from './Loader'\nimport Post from './Post'\n\nexport default () => {\n    const dispatch = useDispatch()\n    const posts = useSelector(state => state.posts.fetchedPosts)\n    const loading = useSelector(state => state.app.loading)\n\n    if (loading) {\n        return (\n            <Loader/>\n        )\n    }\n\n    if(!posts.length) {\n        return <button \n        className=\"btn btn-primary\"\n        onClick={() => dispatch(fetchedPosts())}\n        >Завантажити</button>\n    }\n    return posts.map(post => <Post post={post} key={post.id}/>)\n}","import { CREATE_POST, FETCH_POSTS, HIDE_LOADER, SHOW_LOADER } from \"./types\";\n\nexport function createPost (post) {\n    return {\n        type: CREATE_POST,\n        payload: post\n    }\n}\n\nexport function showLoader() {\n    return {\n        type: SHOW_LOADER\n    }\n}\n\nexport function hideLoader() {\n    return {\n        type: HIDE_LOADER\n    }\n}\n\nexport function fetchedPosts() {\n    return async dispatch => {\n        dispatch(showLoader())\n        const response = await fetch('https://jsonplaceholder.typicode.com/posts?_limit=5');\n        const json = await response.json();\n        setTimeout(() => {\n            dispatch({type: FETCH_POSTS, payload: json})\n            dispatch(hideLoader())\n        }, 1000)\n    }\n}","import React from 'react';\nimport {connect} from 'react-redux';\nimport {createPost} from '../redux/actions'\n\n \nclass PostForm extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            title: ''\n        }\n    }\n\n    submitHandler = event => {\n        event.preventDefault()\n\n        const {title} = this.state\n\n        if(!title.trim()) {\n            return\n        }\n\n        const newPost = {\n            title, id: Date.now().toString()\n        }\n\n        this.props.createPost(newPost)\n        this.setState({title: ''})\n    }\n\n    changeInputHandler = event => {\n        event.persist()\n        this.setState(prev => ({...prev, ...{\n            [event.target.name]: event.target.value\n        }}))\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.submitHandler}>\n                <div className=\"form-group\">\n                    <label htmlFor=\"title\">Заголовок поста</label>\n                    <input \n                        type=\"text\" \n                        className=\"form-control\" \n                        id=\"title\"\n                        value={this.state.title}\n                        name=\"title\"\n                        onChange={this.changeInputHandler}\n                     />\n                </div>\n                <button className=\"btn btn-success\" type=\"submit\">Створити</button>\n            </form>\n        )\n    }\n}\n\nconst mapDispatchToProps = {\n    createPost\n}\n\nexport default connect(null, mapDispatchToProps)(PostForm)","import React from 'react'\nimport {connect} from 'react-redux'\nimport Post from './Post'\n\nconst Posts = ({syncPosts}) => {\n    if(!syncPosts .length) {\n        return <p className=\"text-center\">Постів поки немає</p>\n    }\n    return syncPosts.map(post => <Post post={post} key={post}/>)\n}\n\nconst mapStateToProps = state => {\n    console.log(state)\n    return {\n        syncPosts: state.posts.posts\n    }\n}\n\nexport default connect(mapStateToProps, null)(Posts);","import React from 'react'\nimport FetchedPosts from './components/FetchedPosts';\nimport PostForm from \"./components/PostForm\";\nimport Posts from './components/Posts';\n\nfunction App() {\n  return (\n    <div className=\"container pt-3\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <PostForm />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <h2>Синхронні пости</h2>\n          <Posts />\n        </div>\n        <div className=\"col\">\n          <h2>Асинхронні пости</h2>\n          <FetchedPosts />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { HIDE_LOADER, SHOW_LOADER } from \"./types\"\n\nconst initialState = {\n    loading: false\n}\n\nexport const appReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SHOW_LOADER:\n            return {...state, loading: true}\n        case HIDE_LOADER: \n            return {...state, loading: false}\n        default: return state\n    }\n}","import { CREATE_POST, FETCH_POSTS } from \"./types\";\n\nconst initialState = {\n    posts: [],\n    fetchedPosts: [],\n}\n\nexport const postsReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case CREATE_POST:\n            return {...state, posts: state.posts.concat([action.payload])}\n            // return {...state, posts: [...state.posts, action.payload]}\n        case FETCH_POSTS:\n            return {...state, fetchedPosts: action.payload}\n        default: return state \n    }\n}","import { combineReducers } from \"redux\";\nimport { appReducer } from \"./appReducer\";\nimport { postsReducer } from \"./postsReducer\";\n\nexport const rootReducer = combineReducers({\n    posts: postsReducer,\n    app: appReducer,\n})","import React from 'react';\nimport {render} from 'react-dom';\nimport {compose, createStore, applyMiddleware} from 'redux';\nimport {Provider} from 'react-redux';\nimport thunk from 'redux-thunk';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { rootReducer } from './redux/rootReducer';\n\nconst store = createStore(rootReducer, compose(\n  applyMiddleware(\n    thunk  \n  ),\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n))\n\nconst app = (\n  <Provider store={store}>\n    <App/>\n  </Provider>\n)\n\nrender(\n  app,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}